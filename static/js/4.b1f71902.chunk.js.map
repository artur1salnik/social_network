{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","className","classes","dialog","active","id","name","Message","message","maxlength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","messagesPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageText","dialogsItems","values","sendMessage","compose","dispatch","sendMessageActionCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oJCI/MC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAG,eAJT,GAEXC,IAAML,WAStC,OAFqCM,YAAQX,EAARW,CAAoCL,K,2FCN9DM,EARI,SAACJ,GAChB,OACI,qBAAKK,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACI,cAAC,IAAD,CAASP,GAAI,YAAcD,EAAMS,GAAjC,SAAsCT,EAAMU,UCEzCC,EANC,SAACX,GACb,OACI,qBAAKK,UAAWC,IAAQM,QAAxB,SAAkCZ,EAAMY,W,wCCK1CC,EAAcC,YAAiB,IA+C/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAdL,SAAChB,GACpB,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,iBAAiBa,YAAY,qBACvDC,SAAU,CAACC,IAAUZ,OAEhC,8BACI,0DAQDa,EA/CC,SAAC1B,GAEb,IAAIP,EAAQO,EAAM2B,aAEdC,EAAkBnC,EAAMoC,QACvBC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBD,GAAIsB,EAAEtB,IAAZsB,EAAEtB,OAE3CuB,EAAmBvC,EAAMwC,SACxBH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAEzB,OAE7BhB,EAAM0C,eAM3B,OAAKnC,EAAMN,OAGP,sBAAKW,UAAWC,IAAQuB,QAAxB,UACI,qBAAKxB,UAAWC,IAAQ8B,aAAxB,SACKR,IAEL,qBAAKvB,UAAWC,IAAQ2B,SAAxB,SACI,8BAAMD,MAEV,cAACjB,EAAD,CAAqBG,SAdT,SAACmB,GACjBrC,EAAMsC,YAAYD,EAAOF,sBAGH,cAAC,IAAD,CAAUlC,GAAI,Y,yBCL7BsC,sBACXpC,aAfkB,SAACV,GACnB,MAAO,CACHkC,aAAclC,EAAMkC,iBAIH,SAACa,GACtB,MAAO,CACHF,YAAa,SAACH,GACVK,EAASC,YAAyBN,SAO1CvC,IAFW2C,CAGbb","file":"static/js/4.b1f71902.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3zII6\",\"dialogsItems\":\"Dialogs_dialogsItems__3oXMQ\",\"active\":\"Dialogs_active__16_Ix\",\"dialog\":\"Dialogs_dialog__1zPSi\",\"messages\":\"Dialogs_messages__3UjuJ\",\"message\":\"Dialogs_message__29wHP\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return  ConnectedAuthRedirectComponent\r\n}","import classes from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import classes from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nconst maxlength50 = maxLengthCreator(50)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.messagesPage\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n\r\n    let messagesElements = state.messages\r\n        .map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    let newMessageText = state.newMessageText\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageText)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name='newMessageText' placeholder='Enter your message'\r\n                       validate={[required, maxlength50]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport classes from './Dialogs.module.css';\r\nimport {sendMessageActionCreator} from \"../../redux/messagesReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageText) => {\r\n            dispatch(sendMessageActionCreator(newMessageText))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}